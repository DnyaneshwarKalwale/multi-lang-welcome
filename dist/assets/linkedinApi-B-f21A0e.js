var S=Object.defineProperty;var E=(p,t,e)=>t in p?S(p,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):p[t]=e;var w=(p,t,e)=>E(p,typeof t!="symbol"?t+"":t,e);import{a as l}from"./utils-vendor-DFcOAB1P.js";import{J as h}from"./index-CisuWjtJ.js";const y="https://api.brandout.ai/api",u=p=>{if(p)return p;const t=localStorage.getItem("linkedin-login-token");return t||""},g=()=>{localStorage.removeItem("linkedin-login-token"),localStorage.removeItem("linkedin-refresh-token"),localStorage.removeItem("linkedin-token-expiry");let p="https://api.brandout.ai/api";p=p.replace(/\/+$/,"").replace(/\/api$/,""),localStorage.setItem("redirectAfterAuth",window.location.pathname);const t=Date.now(),e=`${p}/api/auth/linkedin-direct?t=${t}`;console.log("LinkedIn token refresh URL:",e),window.location.href=e};class L{constructor(){w(this,"API_URL",`${y}/linkedin`);w(this,"POSTS_API_URL",`${y}/posts`)}async testConnection(){try{return u()?{success:!0,message:"LinkedIn token available",details:{authMethod:localStorage.getItem("auth-method")||"unknown",hasToken:!0}}:{success:!1,message:"No authentication token found",errorType:"auth_missing",details:{authMethod:localStorage.getItem("auth-method")||"none",hasLinkedInToken:!!localStorage.getItem("linkedin-login-token")}}}catch(t){return{success:!1,message:"Error checking LinkedIn connectivity",errorType:"general_error",details:{error:t.message,authMethod:localStorage.getItem("auth-method")||"unknown"}}}}async getUserLinkedInId(t){try{const e=u(t);if(!e)throw new Error("LinkedIn token not available. Please login again.");const o={Authorization:`Bearer ${e}`};return(await l.get(`${this.API_URL}/profile`,{headers:o})).data.id}catch(e){if(console.error("Error getting LinkedIn user ID:",e),e.response&&e.response.data){const o=e.response.data.details&&(e.response.data.details.code==="REVOKED_ACCESS_TOKEN"||e.response.data.details.serviceErrorCode===65601);(e.response.status===401||o||e.response.status===500&&e.response.data.details&&e.response.data.details.includes("token has expired"))&&(console.error("LinkedIn token expired or revoked. Clearing tokens and redirecting to reauthorization."),localStorage.removeItem("linkedin-login-token"),localStorage.removeItem("linkedin-refresh-token"),localStorage.removeItem("linkedin-token-expiry"),g())}throw e}}async createTextPost(t,e="PUBLIC",o){try{const n=u(o);if(!n)throw new Error("LinkedIn token not available. Please login again.");const a={postContent:t,visibility:e};return(await l.post(`${this.API_URL}/post`,a,{headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"}})).data}catch(n){if(console.error("Error creating LinkedIn post:",n),n.response&&n.response.data){console.error("LinkedIn API error response:",n.response.data);const a=n.response.data.details&&(n.response.data.details.code==="REVOKED_ACCESS_TOKEN"||n.response.data.details.serviceErrorCode===65601);if(n.response.status===401||a||n.response.status===500&&n.response.data.details&&n.response.data.details.includes("token has expired"))throw console.error("LinkedIn token expired or revoked. Clearing tokens and redirecting to reauthorization."),localStorage.removeItem("linkedin-login-token"),localStorage.removeItem("linkedin-refresh-token"),localStorage.removeItem("linkedin-token-expiry"),g(),new Error("LinkedIn authentication expired or was revoked. Please login again.")}throw n}}async initializeImageUpload(t){try{return(await l.post(`${this.API_URL}/images/initializeUpload`,{initializeUploadRequest:{owner:"urn:li:person:"+await this.getUserLinkedInId(),serviceRelationships:[{relationshipType:"OWNER",identifier:"urn:li:userGeneratedContent"}]}})).data}catch(e){throw console.error("Error initializing LinkedIn image upload:",e),e}}async uploadImageToLinkedIn(t,e){try{await l.put(t,e,{headers:{"Content-Type":e.type}})}catch(o){throw console.error("Error uploading image to LinkedIn:",o),o}}async createImagePost(t,e,o="",n="PUBLIC"){try{const a=await this.initializeImageUpload(e.name);await this.uploadImageToLinkedIn(a.value.uploadUrl,e);const r={author:`urn:li:person:${await this.getUserLinkedInId()}`,lifecycleState:"PUBLISHED",specificContent:{"com.linkedin.ugc.ShareContent":{shareCommentary:{text:t},shareMediaCategory:"IMAGE",media:[{status:"READY",description:{text:o||e.name},media:a.value.asset,title:{text:e.name}}]}},visibility:{"com.linkedin.ugc.MemberNetworkVisibility":n}};return(await l.post(`${this.API_URL}/posts`,r)).data}catch(a){throw console.error("Error creating LinkedIn image post:",a),a}}async createCloudinaryImagePost(t,e,o="image",n="Shared image",a="PUBLIC",s){try{const r=u(s);if(!r)throw new Error("LinkedIn token not available. Please login again.");if(console.log("Creating post with Cloudinary image:",{text:t,imageUrl:e,fileName:o,imageTitle:n}),!e||!e.includes("cloudinary.com"))throw new Error("Invalid Cloudinary image URL");let i=e;if(e.includes("/upload/"))try{const d=e.split("/upload/");if(d.length===2){const m=d[0];let k=d[1];k.includes("?")&&(k=k.split("?")[0]),i=`${m}/upload/${k}`}}catch{}console.log("Using direct image URL:",i);const c={postContent:t,imagePath:i,imageTitle:n||o,imageDescription:"Shared via BrandOut",isCloudinaryImage:!0,visibility:a};try{return(await l.post(`${this.API_URL}/post`,c,{headers:{Authorization:`Bearer ${r}`,"Content-Type":"application/json"}})).data}catch(d){if(console.error("Error posting with Cloudinary image:",d),d.response&&d.response.status===422){console.log("Backend could not process the image, falling back to text-only post");const m={postContent:`${t}

${n}: ${i}`,visibility:a};return(await l.post(`${this.API_URL}/post`,m,{headers:{Authorization:`Bearer ${r}`,"Content-Type":"application/json"}})).data}throw d}}catch(r){if(console.error("Error creating LinkedIn Cloudinary image post:",r),r.response&&r.response.data){const i=r.response.data.details&&(r.response.data.details.code==="REVOKED_ACCESS_TOKEN"||r.response.data.details.serviceErrorCode===65601);if(r.response.status===401||i||r.response.status===500&&r.response.data.details&&r.response.data.details.includes("token has expired"))throw console.error("LinkedIn token expired or revoked. Clearing tokens and redirecting to reauthorization."),localStorage.removeItem("linkedin-login-token"),localStorage.removeItem("linkedin-refresh-token"),localStorage.removeItem("linkedin-token-expiry"),g(),new Error("LinkedIn authentication expired or was revoked. Please login again.")}throw r}}async createArticlePost(t,e,o="",n="",a="PUBLIC",s){try{const r=u(s);if(!r)throw new Error("LinkedIn token not available. Please login again.");const i={postContent:t,articleUrl:e,articleTitle:o||"Shared Article",articleDescription:n||"Shared via BrandOut",visibility:a};return(await l.post(`${this.API_URL}/post-article`,i,{headers:{Authorization:`Bearer ${r}`,"Content-Type":"application/json"}})).data}catch(r){if(console.error("Error publishing to LinkedIn:",r),r.response&&r.response.data){const i=r.response.data.details&&(r.response.data.details.code==="REVOKED_ACCESS_TOKEN"||r.response.data.details.serviceErrorCode===65601);if(r.response.status===401||i||r.response.status===500&&r.response.data.details&&r.response.data.details.includes("token has expired"))throw console.error("LinkedIn token expired or revoked. Clearing tokens and redirecting to reauthorization."),localStorage.removeItem("linkedin-login-token"),localStorage.removeItem("linkedin-refresh-token"),localStorage.removeItem("linkedin-token-expiry"),g(),new Error("LinkedIn authentication expired or was revoked. Please login again.")}throw r}}async createDocumentPost(t,e,o="Document",n="PUBLIC",a){try{const s=u(a);if(!s)throw new Error("LinkedIn token not available. Please login again.");const r=`Document: ${e.name} (${(e.size/1024/1024).toFixed(2)} MB)`,c={postContent:`${t}

${r}`,visibility:n};return(await l.post(`${this.API_URL}/post`,c,{headers:{Authorization:`Bearer ${s}`,"Content-Type":"application/json"}})).data}catch(s){if(console.error("Error creating LinkedIn document post:",s),s.response&&s.response.data){const r=s.response.data.details&&(s.response.data.details.code==="REVOKED_ACCESS_TOKEN"||s.response.data.details.serviceErrorCode===65601);if(s.response.status===401||r||s.response.status===500&&s.response.data.details&&s.response.data.details.includes("token has expired"))throw console.error("LinkedIn token expired or revoked. Clearing tokens and redirecting to reauthorization."),localStorage.removeItem("linkedin-login-token"),localStorage.removeItem("linkedin-refresh-token"),localStorage.removeItem("linkedin-token-expiry"),g(),new Error("LinkedIn authentication expired or was revoked. Please login again.")}throw s}}async createCarouselPost(t,e,o="PUBLIC",n){var a,s;try{const r=u(n);if(!r)throw new Error("LinkedIn token not available. Please login again.");const i=e.filter(f=>{var I;return f.imageUrl||((I=f.cloudinaryImage)==null?void 0:I.secure_url)});if(i.length===0)throw new Error("No slides with images found. Carousel posts require at least one image.");const c=i[0],d=((a=c.cloudinaryImage)==null?void 0:a.secure_url)||c.imageUrl;if(!d)throw new Error("First slide has no valid image URL");const m=e.map((f,I)=>`Slide ${I+1}: ${f.content}`).join(`

`),P={postContent:`${t}

${m}

(Note: This post contains multiple slides that would normally display as a carousel when posted directly via LinkedIn)`,imagePath:d,imageTitle:((s=c.cloudinaryImage)==null?void 0:s.original_filename)||"Carousel Image",imageDescription:"Carousel post with multiple slides",isCloudinaryImage:!0,visibility:o};return(await l.post(`${this.API_URL}/post`,P,{headers:{Authorization:`Bearer ${r}`,"Content-Type":"application/json"}})).data}catch(r){if(console.error("Error creating LinkedIn carousel post:",r),r.response&&r.response.data){const i=r.response.data.details&&(r.response.data.details.code==="REVOKED_ACCESS_TOKEN"||r.response.data.details.serviceErrorCode===65601);if(r.response.status===401||i||r.response.status===500&&r.response.data.details&&r.response.data.details.includes("token has expired"))throw console.error("LinkedIn token expired or revoked. Clearing tokens and redirecting to reauthorization."),localStorage.removeItem("linkedin-login-token"),localStorage.removeItem("linkedin-refresh-token"),localStorage.removeItem("linkedin-token-expiry"),g(),new Error("LinkedIn authentication expired or was revoked. Please login again.")}throw r}}async schedulePost(t,e){try{const o={...t,scheduledTime:e.getTime()};return(await l.post(`${this.API_URL}/posts/schedule`,o)).data}catch(o){throw console.error("Error scheduling LinkedIn post:",o),o}}async createPollPost(t,e,o=7,n){try{const a=u(n);if(!a)throw new Error("LinkedIn token not available. Please login again.");const s={postContent:t,pollOptions:e,pollDuration:o*86400};return(await l.post(`${this.API_URL}/post-poll`,s,{headers:{Authorization:`Bearer ${a}`,"Content-Type":"application/json"}})).data}catch(a){if(console.error("Error creating LinkedIn poll:",a),a.response&&a.response.data){const s=a.response.data.details&&(a.response.data.details.code==="REVOKED_ACCESS_TOKEN"||a.response.data.details.serviceErrorCode===65601);if(a.response.status===401||s||a.response.status===500&&a.response.data.details&&a.response.data.details.includes("token has expired"))throw console.error("LinkedIn token expired or revoked. Clearing tokens and redirecting to reauthorization."),localStorage.removeItem("linkedin-login-token"),localStorage.removeItem("linkedin-refresh-token"),localStorage.removeItem("linkedin-token-expiry"),g(),new Error("LinkedIn authentication expired or was revoked. Please login again.")}throw a}}async deletePost(t){try{await l.delete(`${this.API_URL}/posts/${t}`)}catch(e){throw console.error("Error deleting LinkedIn post:",e),e}}async getUserPosts(t=10){return[]}async getDraftsAndScheduled(){const t=[],e=[];try{const o=localStorage.getItem("linkedinDrafts");if(o){const a=JSON.parse(o);Array.isArray(a)&&t.push(...a)}const n=localStorage.getItem("linkedinScheduledPosts");if(n){const a=JSON.parse(n);Array.isArray(a)&&e.push(...a)}}catch(o){console.error("Error loading posts from localStorage:",o)}return[...t,...e]}async deleteDraft(t){try{const e=localStorage.getItem("linkedinDrafts");if(e){const o=JSON.parse(e);if(Array.isArray(o)){const n=o.filter(a=>a.id!==t);return localStorage.setItem("linkedinDrafts",JSON.stringify(n)),!0}}return!1}catch(e){return console.error("Error deleting draft from localStorage:",e),!1}}async deleteScheduledPost(t){try{const e=localStorage.getItem("linkedinScheduledPosts");if(e){const o=JSON.parse(e);if(Array.isArray(o)){const n=o.filter(a=>a.id!==t);return localStorage.setItem("linkedinScheduledPosts",JSON.stringify(n)),!0}}return!1}catch(e){return console.error("Error deleting scheduled post from localStorage:",e),!1}}async savePublishedPost(t){return t}async saveDraft(t){return t}async saveScheduledPost(t){return t}async updatePost(t,e){try{return(await l.put(`${this.API_URL}/posts/${t}`,e)).data}catch(o){throw console.error("Error updating post:",o),o}}async publishNow(t){try{return(await l.post(`${this.API_URL}/posts/${t}/publish`)).data}catch(e){throw console.error("Error publishing post:",e),e}}async getDBPosts(t,e=1,o=20){try{const n=h.getToken();if(!n)throw new Error("Authentication token not available. Please login again.");const a={page:e,limit:o};return t&&(a.status=t),(await l.get(this.POSTS_API_URL,{headers:{Authorization:`Bearer ${n}`},params:a})).data}catch(n){throw console.error("Error fetching posts:",n),n}}async getDBPostById(t){try{const e=h.getToken();if(!e)throw new Error("Authentication token not available. Please login again.");return(await l.get(`${this.POSTS_API_URL}/${t}`,{headers:{Authorization:`Bearer ${e}`}})).data}catch(e){throw console.error("Error fetching post:",e),e}}async createDBPost(t){try{const e=h.getToken();if(!e)throw new Error("Authentication token not available. Please login again.");return(await l.post(this.POSTS_API_URL,t,{headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}})).data}catch(e){throw console.error("Error creating post:",e),e}}async updateDBPost(t,e){try{const o=h.getToken();if(!o)throw new Error("Authentication token not available. Please login again.");return(await l.put(`${this.POSTS_API_URL}/${t}`,e,{headers:{Authorization:`Bearer ${o}`,"Content-Type":"application/json"}})).data}catch(o){throw console.error("Error updating post:",o),o}}async deleteDBPost(t){var e;try{if(t.startsWith("draft_")||t.startsWith("scheduled_"))return console.log("Deleting local post from localStorage:",t),localStorage.removeItem(t),{success:!0,message:"Post deleted from localStorage"};const o=h.getToken();if(!o)throw new Error("Authentication token not available. Please login again.");console.log("Deleting post from API:",t);try{const s=(e=(await l.get(`${this.POSTS_API_URL}/${t}`,{headers:{Authorization:`Bearer ${o}`}})).data)==null?void 0:e.data;if(console.log("Retrieved post data for deletion:",s),s&&s.status==="published"&&s.platformPostId)try{console.log("Attempting to delete post from LinkedIn:",s.platformPostId),await l.delete(`${this.API_URL}/delete-linkedin-post`,{headers:{Authorization:`Bearer ${o}`,"Content-Type":"application/json"},data:{postId:s.platformPostId}}),console.log("Successfully sent LinkedIn post deletion request")}catch(r){console.error("Failed to delete post from LinkedIn:",r)}}catch(a){console.error("Error fetching post before deletion:",a)}return(await l.delete(`${this.POSTS_API_URL}/${t}`,{headers:{Authorization:`Bearer ${o}`}})).data}catch(o){throw console.error("Error deleting post:",o),o}}async publishDBPost(t){try{const e=h.getToken();if(!e)throw new Error("Authentication token not available. Please login again.");console.log("Publishing post with ID:",t);const o=await this.getPostById(t);if(!o||!o.data)throw new Error("Post not found or could not be retrieved");const n=await l.post(`${this.POSTS_API_URL}/${t}/publish`,{},{headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});return console.log("Publish response from backend:",n.data),{success:!0,data:(await this.getPostById(t)).data,message:"Post published successfully"}}catch(e){throw console.error("Error publishing post:",e),e}}async getPostById(t){try{const e=h.getToken();if(!e)throw new Error("Authentication token not available. Please login again.");return(await l.get(`${this.POSTS_API_URL}/${t}`,{headers:{Authorization:`Bearer ${e}`}})).data}catch(e){throw console.error("Error fetching post:",e),e}}async scheduleDBPost(t,e){try{const o=h.getToken();if(!o)throw new Error("Authentication token not available. Please login again.");return(await l.post(`${this.POSTS_API_URL}/${t}/schedule`,{scheduledTime:e},{headers:{Authorization:`Bearer ${o}`,"Content-Type":"application/json"}})).data}catch(o){throw console.error("Error scheduling post:",o),o}}async migrateSinglePostToDatabase(t){try{const e=h.getToken();if(!e)throw new Error("Authentication token not available. Please login again.");const o=await l.post(`${this.POSTS_API_URL}/migrate-from-local`,{posts:[t]},{headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(o.data.success&&o.data.results&&o.data.results.length>0){const n=o.data.results[0];if(n.success)try{localStorage.removeItem(t.id)}catch(a){console.error(`Error removing migrated post ${t.id} from localStorage:`,a)}return{success:!0,migratedPost:n,message:"Post migrated successfully"}}return{success:!1,message:"Failed to migrate post",details:o.data}}catch(e){throw console.error("Error migrating post to database:",e),e}}async migrateLocalPostsToDatabase(t){var e,o;try{const n=h.getToken();if(!n)throw new Error("Authentication token not available. Please login again.");const a=t||[];if(!t||t.length===0)for(let r=0;r<localStorage.length;r++){const i=localStorage.key(r);if(i!=null&&i.startsWith("draft_"))try{const c=JSON.parse(localStorage.getItem(i)||"{}");c.id&&a.push({...c,status:"draft"})}catch(c){console.error("Error parsing draft for migration:",c)}else if(i!=null&&i.startsWith("scheduled_"))try{const c=JSON.parse(localStorage.getItem(i)||"{}");c.id&&a.push({...c,status:"scheduled"})}catch(c){console.error("Error parsing scheduled post for migration:",c)}}if(a.length===0)return{success:!0,message:"No posts found to migrate",migratedCount:0,migratedPosts:[]};const s=await l.post(`${this.POSTS_API_URL}/migrate-from-local`,{posts:a},{headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"}});if(s.data.success&&s.data.results){const r=s.data.results.filter(i=>i.success);for(const i of r)try{localStorage.removeItem(i.id)}catch(c){console.error(`Error removing migrated post ${i.id} from localStorage:`,c)}}return{...s.data,migratedCount:((e=s.data.results)==null?void 0:e.filter(r=>r.success).length)||0,migratedPosts:((o=s.data.results)==null?void 0:o.filter(r=>r.success))||[]}}catch(n){throw console.error("Error migrating posts to database:",n),n}}}const T=new L;export{T as l};
