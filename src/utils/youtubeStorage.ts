/**
 * YouTube Transcript Storage Utility
 * This utility manages saving and retrieving YouTube transcript data
 */

// Local storage key for saved YouTube videos
const YOUTUBE_STORAGE_KEY = 'saved_youtube_videos';

// Interface for YouTube transcript data
export interface YouTubeVideo {
  id: string;
  videoId: string;
  title: string;
  thumbnail: string;
  transcript: string;
  language: string;
  isAutoGenerated: boolean;
  dateAdded: string;
  status: 'in_progress' | 'delivered';
  slideCount?: number;
}

/**
 * Save YouTube video data to local storage
 * @param video YouTube video data to save
 */
export const saveYouTubeVideo = (video: YouTubeVideo): void => {
  try {
    // Get existing videos
    const storedVideos = localStorage.getItem(YOUTUBE_STORAGE_KEY);
    const videos: YouTubeVideo[] = storedVideos ? JSON.parse(storedVideos) : [];
    
    // Check if video already exists (by videoId)
    const existingIndex = videos.findIndex(v => v.videoId === video.videoId);
    
    if (existingIndex >= 0) {
      // Update existing video
      videos[existingIndex] = video;
    } else {
      // Add new video to the beginning
      videos.unshift(video);
    }
    
    // Save back to local storage
    localStorage.setItem(YOUTUBE_STORAGE_KEY, JSON.stringify(videos));
  } catch (error) {
    console.error('Error saving YouTube video data:', error);
  }
};

/**
 * Get all saved YouTube videos
 * @returns Array of saved YouTube videos
 */
export const getSavedYouTubeVideos = (): YouTubeVideo[] => {
  try {
    const storedVideos = localStorage.getItem(YOUTUBE_STORAGE_KEY);
    return storedVideos ? JSON.parse(storedVideos) : [];
  } catch (error) {
    console.error('Error getting saved YouTube videos:', error);
    return [];
  }
};

/**
 * Get YouTube video by ID
 * @param videoId YouTube video ID
 * @returns Video data or null if not found
 */
export const getYouTubeVideoById = (videoId: string): YouTubeVideo | null => {
  try {
    const videos = getSavedYouTubeVideos();
    return videos.find(video => video.videoId === videoId) || null;
  } catch (error) {
    console.error('Error getting YouTube video:', error);
    return null;
  }
};

/**
 * Delete YouTube video from storage
 * @param videoId YouTube video ID to delete
 */
export const deleteYouTubeVideo = (videoId: string): void => {
  try {
    const storedVideos = localStorage.getItem(YOUTUBE_STORAGE_KEY);
    if (!storedVideos) return;
    
    const videos = JSON.parse(storedVideos);
    const filteredVideos = videos.filter((v: YouTubeVideo) => v.videoId !== videoId);
    
    localStorage.setItem(YOUTUBE_STORAGE_KEY, JSON.stringify(filteredVideos));
  } catch (error) {
    console.error('Error deleting YouTube video:', error);
  }
};

/**
 * Update YouTube video status
 * @param videoId YouTube video ID
 * @param status New status
 */
export const updateYouTubeVideoStatus = (videoId: string, status: 'in_progress' | 'delivered'): void => {
  try {
    const video = getYouTubeVideoById(videoId);
    if (video) {
      video.status = status;
      saveYouTubeVideo(video);
    }
  } catch (error) {
    console.error('Error updating YouTube video status:', error);
  }
}; 